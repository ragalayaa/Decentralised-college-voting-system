/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface VotingInterface extends Interface {
    getFunction(nameOrSignature: "addCandidate" | "candidates" | "candidatesCount" | "getVotes" | "hasVoted" | "vote"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;

    encodeFunctionData(functionFragment: 'addCandidate', values: [string]): string;
encodeFunctionData(functionFragment: 'candidates', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'candidatesCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getVotes', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasVoted', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'vote', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'addCandidate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'candidates', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'candidatesCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVotes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasVoted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result;
  }

  
    export namespace VotedEvent {
      export type InputTuple = [voter: AddressLike, candidateId: BigNumberish];
      export type OutputTuple = [voter: string, candidateId: bigint];
      export interface OutputObject {voter: string, candidateId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Voting extends BaseContract {
    
    connect(runner?: ContractRunner | null): Voting;
    waitForDeployment(): Promise<this>;

    interface: VotingInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addCandidate: TypedContractMethod<
      [_name: string, ],
      [void],
      'nonpayable'
    >
    

    
    candidates: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint] & {id: bigint, name: string, voteCount: bigint }],
      'view'
    >
    

    
    candidatesCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getVotes: TypedContractMethod<
      [_candidateId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    hasVoted: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    vote: TypedContractMethod<
      [_candidateId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addCandidate'): TypedContractMethod<
      [_name: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'candidates'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint] & {id: bigint, name: string, voteCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'candidatesCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getVotes'): TypedContractMethod<
      [_candidateId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasVoted'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'vote'): TypedContractMethod<
      [_candidateId: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Voted'): TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;

    filters: {
      
      'Voted(address,uint256)': TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
      Voted: TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
    
    };
  }